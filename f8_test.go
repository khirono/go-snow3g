package snow3g

import (
	"bytes"
	"testing"
)

func TestF8_TestSet1(t *testing.T) {
	count := uint32(0x72a4f20f)
	bearer := uint8(0x0c)
	dir := uint8(1)
	ck := []byte{
		0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
		0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48,
	}
	length := uint64(798)
	ibs := []byte{
		0x7e, 0xc6, 0x12, 0x72, 0x74, 0x3b, 0xf1, 0x61,
		0x47, 0x26, 0x44, 0x6a, 0x6c, 0x38, 0xce, 0xd1,
		0x66, 0xf6, 0xca, 0x76, 0xeb, 0x54, 0x30, 0x04,
		0x42, 0x86, 0x34, 0x6c, 0xef, 0x13, 0x0f, 0x92,
		0x92, 0x2b, 0x03, 0x45, 0x0d, 0x3a, 0x99, 0x75,
		0xe5, 0xbd, 0x2e, 0xa0, 0xeb, 0x55, 0xad, 0x8e,
		0x1b, 0x19, 0x9e, 0x3e, 0xc4, 0x31, 0x60, 0x20,
		0xe9, 0xa1, 0xb2, 0x85, 0xe7, 0x62, 0x79, 0x53,
		0x59, 0xb7, 0xbd, 0xfd, 0x39, 0xbe, 0xf4, 0xb2,
		0x48, 0x45, 0x83, 0xd5, 0xaf, 0xe0, 0x82, 0xae,
		0xe6, 0x38, 0xbf, 0x5f, 0xd5, 0xa6, 0x06, 0x19,
		0x39, 0x01, 0xa0, 0x8f, 0x4a, 0xb4, 0x1a, 0xab,
		0x9b, 0x13, 0x48, 0x80,
	}
	obs := []byte{
		0x8c, 0xeb, 0xa6, 0x29, 0x43, 0xdc, 0xed, 0x3a,
		0x09, 0x90, 0xb0, 0x6e, 0xa1, 0xb0, 0xa2, 0xc4,
		0xfb, 0x3c, 0xed, 0xc7, 0x1b, 0x36, 0x9f, 0x42,
		0xba, 0x64, 0xc1, 0xeb, 0x66, 0x65, 0xe7, 0x2a,
		0xa1, 0xc9, 0xbb, 0x0d, 0xea, 0xa2, 0x0f, 0xe8,
		0x60, 0x58, 0xb8, 0xba, 0xee, 0x2c, 0x2e, 0x7f,
		0x0b, 0xec, 0xce, 0x48, 0xb5, 0x29, 0x32, 0xa5,
		0x3c, 0x9d, 0x5f, 0x93, 0x1a, 0x3a, 0x7c, 0x53,
		0x22, 0x59, 0xaf, 0x43, 0x25, 0xe2, 0xa6, 0x5e,
		0x30, 0x84, 0xad, 0x5f, 0x6a, 0x51, 0x3b, 0x7b,
		0xdd, 0xc1, 0xb6, 0x5f, 0x0a, 0xa0, 0xd9, 0x7a,
		0x05, 0x3d, 0xb5, 0x5a, 0x88, 0xc4, 0xc4, 0xf9,
		0x60, 0x5e, 0x41, 0x40,
	}

	t.Run("Encript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, ibs, length)
		if !bytes.Equal(got, obs) {
			t.Errorf("want %x; but got %x\n", obs, got)
		}
	})
	t.Run("Decript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, obs, length)
		if !bytes.Equal(got, ibs) {
			t.Errorf("want %x; but got %x\n", ibs, got)
		}
	})
}

func TestF8_TestSet2(t *testing.T) {
	count := uint32(0xe28bcf7b)
	bearer := uint8(0x18)
	dir := uint8(0)
	ck := []byte{
		0xef, 0xa8, 0xb2, 0x22, 0x9e, 0x72, 0x0c, 0x2a,
		0x7c, 0x36, 0xea, 0x55, 0xe9, 0x60, 0x56, 0x95,
	}
	length := uint64(510)
	ibs := []byte{
		0x10, 0x11, 0x12, 0x31, 0xe0, 0x60, 0x25, 0x3a,
		0x43, 0xfd, 0x3f, 0x57, 0xe3, 0x76, 0x07, 0xab,
		0x28, 0x27, 0xb5, 0x99, 0xb6, 0xb1, 0xbb, 0xda,
		0x37, 0xa8, 0xab, 0xcc, 0x5a, 0x8c, 0x55, 0x0d,
		0x1b, 0xfb, 0x2f, 0x49, 0x46, 0x24, 0xfb, 0x50,
		0x36, 0x7f, 0xa3, 0x6c, 0xe3, 0xbc, 0x68, 0xf1,
		0x1c, 0xf9, 0x3b, 0x15, 0x10, 0x37, 0x6b, 0x02,
		0x13, 0x0f, 0x81, 0x2a, 0x9f, 0xa1, 0x69, 0xd8,
	}
	obs := []byte{
		0xe0, 0xda, 0x15, 0xca, 0x8e, 0x25, 0x54, 0xf5,
		0xe5, 0x6c, 0x94, 0x68, 0xdc, 0x6c, 0x7c, 0x12,
		0x9c, 0x56, 0x8a, 0xa5, 0x03, 0x23, 0x17, 0xe0,
		0x4e, 0x07, 0x29, 0x64, 0x6c, 0xab, 0xef, 0xa6,
		0x89, 0x86, 0x4c, 0x41, 0x0f, 0x24, 0xf9, 0x19,
		0xe6, 0x1e, 0x3d, 0xfd, 0xfa, 0xd7, 0x7e, 0x56,
		0x0d, 0xb0, 0xa9, 0xcd, 0x36, 0xc3, 0x4a, 0xe4,
		0x18, 0x14, 0x90, 0xb2, 0x9f, 0x5f, 0xa2, 0xfc,
	}

	t.Run("Encript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, ibs, length)
		if !bytes.Equal(got, obs) {
			t.Errorf("want %x; but got %x\n", obs, got)
		}
	})
	t.Run("Decript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, obs, length)
		if !bytes.Equal(got, ibs) {
			t.Errorf("want %x; but got %x\n", ibs, got)
		}
	})
}

func TestF8_TestSet3(t *testing.T) {
	count := uint32(0xfa556b26)
	bearer := uint8(0x03)
	dir := uint8(1)
	ck := []byte{
		0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20,
		0x4e, 0xa5, 0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52,
	}
	length := uint64(120)
	ibs := []byte{
		0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8,
	}
	obs := []byte{
		0xba, 0x0f, 0x31, 0x30, 0x03, 0x34, 0xc5, 0x6b,
		0x52, 0xa7, 0x49, 0x7c, 0xba, 0xc0, 0x46,
	}

	t.Run("Encript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, ibs, length)
		if !bytes.Equal(got, obs) {
			t.Errorf("want %x; but got %x\n", obs, got)
		}
	})
	t.Run("Decript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, obs, length)
		if !bytes.Equal(got, ibs) {
			t.Errorf("want %x; but got %x\n", ibs, got)
		}
	})
}

func TestF8_TestSet4(t *testing.T) {
	count := uint32(0x398a59b4)
	bearer := uint8(0x05)
	dir := uint8(1)
	ck := []byte{
		0xd3, 0xc5, 0xd5, 0x92, 0x32, 0x7f, 0xb1, 0x1c,
		0x40, 0x35, 0xc6, 0x68, 0x0a, 0xf8, 0xc6, 0xd1,
	}
	length := uint64(253)
	ibs := []byte{
		0x98, 0x1b, 0xa6, 0x82, 0x4c, 0x1b, 0xfb, 0x1a,
		0xb4, 0x85, 0x47, 0x20, 0x29, 0xb7, 0x1d, 0x80,
		0x8c, 0xe3, 0x3e, 0x2c, 0xc3, 0xc0, 0xb5, 0xfc,
		0x1f, 0x3d, 0xe8, 0xa6, 0xdc, 0x66, 0xb1, 0xf0,
	}
	obs := []byte{
		0x98, 0x9b, 0x71, 0x9c, 0xdc, 0x33, 0xce, 0xb7,
		0xcf, 0x27, 0x6a, 0x52, 0x82, 0x7c, 0xef, 0x94,
		0xa5, 0x6c, 0x40, 0xc0, 0xab, 0x9d, 0x81, 0xf7,
		0xa2, 0xa9, 0xba, 0xc6, 0x0e, 0x11, 0xc4, 0xb0,
	}

	t.Run("Encript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, ibs, length)
		if !bytes.Equal(got, obs) {
			t.Errorf("want %x; but got %x\n", obs, got)
		}
	})
	t.Run("Decript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, obs, length)
		if !bytes.Equal(got, ibs) {
			t.Errorf("want %x; but got %x\n", ibs, got)
		}
	})
}

func TestF8_TestSet5(t *testing.T) {
	count := uint32(0x72a4f20f)
	bearer := uint8(0x09)
	dir := uint8(0)
	ck := []byte{
		0x60, 0x90, 0xea, 0xe0, 0x4c, 0x83, 0x70, 0x6e,
		0xec, 0xbf, 0x65, 0x2b, 0xe8, 0xe3, 0x65, 0x66,
	}
	length := uint64(837)
	ibs := []byte{
		0x40, 0x98, 0x1b, 0xa6, 0x82, 0x4c, 0x1b, 0xfb,
		0x42, 0x86, 0xb2, 0x99, 0x78, 0x3d, 0xaf, 0x44,
		0x2c, 0x09, 0x9f, 0x7a, 0xb0, 0xf5, 0x8d, 0x5c,
		0x8e, 0x46, 0xb1, 0x04, 0xf0, 0x8f, 0x01, 0xb4,
		0x1a, 0xb4, 0x85, 0x47, 0x20, 0x29, 0xb7, 0x1d,
		0x36, 0xbd, 0x1a, 0x3d, 0x90, 0xdc, 0x3a, 0x41,
		0xb4, 0x6d, 0x51, 0x67, 0x2a, 0xc4, 0xc9, 0x66,
		0x3a, 0x2b, 0xe0, 0x63, 0xda, 0x4b, 0xc8, 0xd2,
		0x80, 0x8c, 0xe3, 0x3e, 0x2c, 0xcc, 0xbf, 0xc6,
		0x34, 0xe1, 0xb2, 0x59, 0x06, 0x08, 0x76, 0xa0,
		0xfb, 0xb5, 0xa4, 0x37, 0xeb, 0xcc, 0x8d, 0x31,
		0xc1, 0x9e, 0x44, 0x54, 0x31, 0x87, 0x45, 0xe3,
		0x98, 0x76, 0x45, 0x98, 0x7a, 0x98, 0x6f, 0x2c,
		0xb0,
	}
	obs := []byte{
		0x58, 0x92, 0xbb, 0xa8, 0x8b, 0xbb, 0xca, 0xae,
		0xae, 0x76, 0x9a, 0xa0, 0x6b, 0x68, 0x3d, 0x3a,
		0x17, 0xcc, 0x04, 0xa3, 0x69, 0x88, 0x16, 0x97,
		0x43, 0x5e, 0x44, 0xfe, 0xd5, 0xff, 0x9a, 0xf5,
		0x7b, 0x9e, 0x89, 0x0d, 0x4d, 0x5c, 0x64, 0x70,
		0x98, 0x85, 0xd4, 0x8a, 0xe4, 0x06, 0x90, 0xec,
		0x04, 0x3b, 0xaa, 0xe9, 0x70, 0x57, 0x96, 0xe4,
		0xa9, 0xff, 0x5a, 0x4b, 0x8d, 0x8b, 0x36, 0xd7,
		0xf3, 0xfe, 0x57, 0xcc, 0x6c, 0xfd, 0x6c, 0xd0,
		0x05, 0xcd, 0x38, 0x52, 0xa8, 0x5e, 0x94, 0xce,
		0x6b, 0xcd, 0x90, 0xd0, 0xd0, 0x78, 0x39, 0xce,
		0x09, 0x73, 0x35, 0x44, 0xca, 0x8e, 0x35, 0x08,
		0x43, 0x24, 0x85, 0x50, 0x92, 0x2a, 0xc1, 0x28,
		0x18,
	}

	t.Run("Encript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, ibs, length)
		if !bytes.Equal(got, obs) {
			t.Errorf("want %x; but got %x\n", obs, got)
		}
	})
	t.Run("Decript", func(t *testing.T) {
		got := F8(ck, count, bearer, dir, obs, length)
		if !bytes.Equal(got, ibs) {
			t.Errorf("want %x; but got %x\n", ibs, got)
		}
	})
}
